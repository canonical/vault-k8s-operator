name: Integration tests

on:
  workflow_call:
    inputs:
      path:
        description: Path to the charm's root directory
        required: true
        type: string
      vault-charm-artifact-name:
        description: Name of the artifact to be downloaded for the vault charm
        required: true
        type: string
      kv-requirer-charm-artifact-name:
        description: Name of the artifact to be uploaded for the kv-requirer charm
        required: true
        type: string

jobs:
  integration-matrix:
    name: Define Integration tests matrix
    runs-on: ubuntu-latest
    outputs:
      suites: ${{ steps.suites.outputs.suites }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix list
        id: suites
        run: |
          cd ${{ inputs.path }}
          list="$(find tests/integration -name 'test_*.py' -printf '%f\n' | jq -r -ncR '[inputs]')"
          echo "suites=$list"
          echo "suites=$list" >> "$GITHUB_OUTPUT"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [integration-matrix]
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJSON(needs.integration-matrix.outputs.suites) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: microk8s
          channel: 1.31-strict/stable
          juju-channel: 3.6/stable

      - name: Install UV and Tox
        run: |
          pipx uninstall tox
          sudo snap install astral-uv --classic
          uv tool install tox --with tox-uv --force
      - name: Enable Metallb
        run: |
          IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
          IFS='.' read -r i1 i2 i3 i4 <<< "$IPADDR"
          START_IP="$i1.$i2.$i3.$((i4+1))"
          END_IP="$i1.$i2.$i3.$((i4+9))"
          RANGE="$START_IP-$END_IP"
          echo "RANGE=$RANGE" >> $GITHUB_OUTPUT
          /usr/bin/sg snap_microk8s -c "sudo microk8s enable metallb:$RANGE"
      - name: Fetch Charm Under Test
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.vault-charm-artifact-name }}
          path: ${{ inputs.path }}built/
      - name: Fetch KV Requirer Charm
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.kv-requirer-charm-artifact-name }}
          path: ${{ inputs.path }}built/
      - name: Run integration tests
        working-directory: ${{ inputs.path }}
        run: |
          tox -e integration -- \
            --charm_path=./built/vault-k8s_amd64.charm \
            --kv_requirer_charm_path=./built/vault-kv-requirer_amd64.charm \
            --alluredir allure-results \
            -k "${{ matrix.suite }}"
      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
      - name: Build test report
        uses: simple-elf/allure-report-action@v1.12
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
      - name: Archive charmcraft logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: charmcraft-logs-${{ matrix.suite }}
          path: /home/runner/.local/state/charmcraft/log/*.log

      - name: Archive juju crashdump
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: juju-crashdump-${{ matrix.suite }}
          path: juju-crashdump-*.tar.xz

  aggregate-integration-results:
    name: Aggregate integration test results
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    steps:
      - name: Check matrix job conclusions
        run: |
          # The 'needs' context contains the results of the jobs listed in 'needs:'
          job_result="${{ needs.integration-tests.result }}"

          echo "Result of $job_result"

          if [ "$job_result" == "success" ] || [ "$job_result" == "skipped" ]; then
            echo "Jobs concluded with success or skips."
            exit 0
          else
            echo "Jobs concluded with '$job_result'."
            exit 1
          fi
