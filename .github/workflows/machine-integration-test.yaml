name: Integration Tests

on:
  workflow_call:
    inputs:
      path:
        description: Path to the charm's root directory
        required: true
        type: string
      vault-charm-artifact-name:
        description: Name of the artifact to be downloaded for the vault charm
        required: true
        type: string
      kv-requirer-charm-artifact-name:
        description: Name of the artifact to be uploaded for the kv-requirer charm
        required: true
        type: string

jobs:
  integration-matrix:
    name: Define Integration tests matrix
    runs-on: ubuntu-latest
    outputs:
      suites: ${{ steps.suites.outputs.suites }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix list
        id: suites
        run: |
          cd ${{ inputs.path }}
          list="$(find tests/integration -name 'test_*.py' -printf '%f\n' | jq -r -ncR '[inputs]')"
          echo "suites=$list"
          echo "suites=$list" >> "$GITHUB_OUTPUT"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [integration-matrix]
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJSON(needs.integration-matrix.outputs.suites) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          juju-channel: 3.6/stable
          provider: lxd
          lxd-channel: 5.21/stable

      - name: Install UV and Tox
        run: |
          pipx uninstall tox
          sudo snap install astral-uv --classic
          uv tool install tox --with tox-uv --force
      - name: Fetch Charm Under Test
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.vault-charm-artifact-name }}
          path: ${{ inputs.path }}built/
      - name: Fetch KV Requirer Charm
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.kv-requirer-charm-artifact-name }}
          path: ${{ inputs.path }}built/
      - name: Install minio binaries and configure storage buckets for backup tests
        if: ${{ matrix.suite == 'test_backup.py' }}
        run: |
          minio_binaries_path="/var/snap/lxd/common/minio"
          sudo mkdir -p ${minio_binaries_path}
          echo "Downloading and installing MinIO binaries to ${minio_binaries_path}"
          sudo wget --quiet --no-clobber https://dl.min.io/server/minio/release/linux-amd64/minio -O ${minio_binaries_path}/minio && sudo chmod +x ${minio_binaries_path}/minio
          sudo wget --quiet --no-clobber https://dl.min.io/client/mc/release/linux-amd64/mc -O ${minio_binaries_path}/mc && sudo chmod +x ${minio_binaries_path}/mc
          sudo snap set lxd minio.path=${minio_binaries_path}
          sudo snap restart lxd
          lxd_bridge_addr=$(sudo lxc network list --format yaml | yq '.[] | select(.name == "lxdbr0") | .config["ipv4.address"]' | cut -d'/' -f1)
          echo "Restricting bucket access to the lxd bridge. lxd_bridge_addr=${lxd_bridge_addr}"
          sudo lxc config set core.storage_buckets_address ${lxd_bridge_addr}:8555
          echo "Waiting for Juju to react to the buckets restriction..."
          sleep 30 # For some reason, the Juju controller needs some time to make itself available after restricting the storage buckets address
          sudo lxc storage bucket create default vault-integration-test
          sudo lxc storage bucket key create default vault-integration-test vault-integration-test --role admin --access-key vaultintegrationtest --secret-key vaultintegrationtest
      - name: Run integration tests
        working-directory: ${{ inputs.path }}
        run: |
          tox -e integration -- \
            --charm_path=./built/vault_amd64.charm \
            --kv_requirer_charm_path=./built/vault-kv-requirer_amd64.charm \
            -k "${{ matrix.suite }}"
      - name: Archive charmcraft logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: charmcraft-logs-${{ matrix.suite }}
          path: /home/runner/.local/state/charmcraft/log/*.log
      - name: Archive juju crashdump
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: juju-crashdump-machine-${{ matrix.suite }}
          path: ${{ inputs.path }}/juju-crashdump-*.tar.xz

  aggregate-integration-results:
    name: Aggregate integration test results
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    steps:
      - name: Check matrix job results
        run: |
          # The 'needs' context contains the results of the jobs listed in 'needs:'
          job_result="${{ needs.integration-tests.result }}"

          echo "Result of $job_result"

          if [ "$job_result" == "success" ] || [ "$job_result" == "skipped" ]; then
            echo "Jobs concluded with success or skips."
            exit 0
          else
            echo "Jobs concluded with '$job_result'."
            exit 1
          fi
